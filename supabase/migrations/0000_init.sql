-- Enable pgroonga extension (if needed for full-text search later, good practice)
-- enable extension if not exists pgroonga with schema extensions;

-- Create Posts Table
create table public.posts (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    content text check (char_length(content) > 0 and char_length(content) <= 280), -- Example length limit
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add RLS policies for posts
alter table public.posts enable row level security;

create policy "Allow logged-in users to view posts" on public.posts
    for select using (auth.role() = 'authenticated');

create policy "Allow users to insert their own posts" on public.posts
    for insert with check (auth.uid() = user_id);

-- Create Positions Table
-- Tracks user positions (long/short) on posts (markets)
create table public.positions (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    post_id bigint references public.posts not null,
    amount numeric not null default 0, -- Positive for long, negative for short
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    -- Ensure a user has only one position entry per post
    unique (user_id, post_id)
);

-- Add index for faster lookups of positions by post
create index idx_positions_post_id on public.positions(post_id);

-- Add RLS policies for positions
alter table public.positions enable row level security;

create policy "Allow logged-in users to view positions" on public.positions
    for select using (auth.role() = 'authenticated');

-- Users can only insert/update their own positions
create policy "Allow users to manage their own positions" on public.positions
    for all using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

-- Function to update `updated_at` timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to automatically update `updated_at` on positions change
create trigger on_position_update
  before update on public.positions
  for each row execute procedure public.handle_updated_at();

